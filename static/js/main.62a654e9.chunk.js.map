{"version":3,"sources":["logo.svg","BoardModel.js","App.js","reportWebVitals.js","index.js"],"names":["BoardModel","playerIsX","_classCallCheck","this","UNSPECIFIED","X","O","TIE","boardState","winner","localPlayerValue","_computerMakeMove","_createClass","key","value","_toConsumableArray","Object","assign","create","getPrototypeOf","cellIndex","_applyMove","console","assert","log","madeMove","computerValue","i","tmpState","_checkForWin","available","push","length","pick","Math","floor","random","playerValue","_checkForTie","cells","player","combos","wincombo","clamp","val","min","max","AreaSquare","props","coordinates","left","toString","top","right","bottom","_jsx","coords","shape","onClick","callback","CellImage","leftOffset","topOffset","src","cellValue","_Fragment","opacity","hover","style","position","pointerEvents","Board","cellIndices","_useState","useState","_useState2","_slicedToArray","hoverIndex","setHoverIndex","GenerateAreaSquare","cellNum","cellCallback","_jsxs","id","margin","width","onMouseMove","event","document","getElementById","getBoundingClientRect","imgRect","normalizedY","clientY","row","normalizedX","clientX","col","onMouseOut","children","useMap","map","index","name","Controls","_useState3","_useState4","setPlayerIsX","onChangeHandler","playerIsXUpdated","target","type","checked","onChange","onNewGame","message","BoardDiv","_useState5","_useState6","boardModel","setBoardModel","playerMakeMove","clone","App","backgroundColor","href","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode"],"mappings":"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","file":"static/js/main.62a654e9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nclass BoardModel\n{\n    constructor(playerIsX) {\n\n        this.UNSPECIFIED = 0;\n        this.X = 1;\n        this.O = 2;\n        this.TIE = 3;\n\n        this.boardState = [0,0,0,  0,0,0,  0,0,0];\n        this.winner = this.UNSPECIFIED; // 0 is no winer, 1 is X, 2 is O, 3 is TIE\n        this.localPlayerValue = (playerIsX ? this.X : this.O);\n\n        if (!playerIsX) {\n            this._computerMakeMove();\n        }\n    }\n\n    getBoardState() {\n        return [...this.boardState];\n    }\n\n    clone() {\n        // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n        return Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n    }\n\n    playerMakeMove(cellIndex) {\n\n        if (this.winner !== this.UNSPECIFIED) {\n            console.log(\"the game is over\")\n            return;\n        }\n\n        if (this.boardState[cellIndex] !== this.UNSPECIFIED) {\n            console.assert(false, \"cell is already taken\");\n            return;\n        }\n\n        this._applyMove(cellIndex, this.localPlayerValue);\n        if (this.winner === this.UNSPECIFIED) {\n            this._computerMakeMove();\n        }\n    }\n\n    _computerMakeMove() {\n        \n        var madeMove = false;\n        var computerValue = (this.localPlayerValue === this.X) ? this.O : this.X;\n\n        let i = 0;\n\n        // look for a winning move\n        for (i = 0; i < 9; i++) {\n            let tmpState = [...this.boardState];\n            if (tmpState[i] === this.UNSPECIFIED) {\n                tmpState[i] = computerValue;\n                if (this._checkForWin(tmpState, computerValue)) {\n                    this._applyMove(i, computerValue);\n                    madeMove = true;\n                    break;\n                }\n            }\n        }\n\n        // look for a blocking mode\n        if (!madeMove) {\n            for (i = 0; i < 9; i++) {\n                let tmpState = [...this.boardState];\n                if (tmpState[i] === this.UNSPECIFIED) {\n                    tmpState[i] = this.localPlayerValue;\n                    if (this._checkForWin(tmpState, this.localPlayerValue)) {\n                        this._applyMove(i, computerValue);\n                        madeMove = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        // look for center\n        if (!madeMove) {\n            if (this.boardState[4] === this.UNSPECIFIED) {\n                this._applyMove(4, computerValue);\n                madeMove = true;\n            }\n        }\n\n        // pick a random cell\n        if (!madeMove) {\n            var available = [];\n            for (i = 0; i < 9; i++) {\n                if (this.boardState[i] === this.UNSPECIFIED) {\n                    available.push(i);\n                }\n            }\n            if (available.length > 0) {\n                var pick = available[Math.floor(Math.random() * available.length)];\n                this._applyMove(pick, computerValue);\n                madeMove = true;\n            }\n        }\n\n        return madeMove;\n    }\n\n    _applyMove(cellIndex, playerValue) {\n\n        console.log(\"_applyMove\", cellIndex, playerValue);\n\n        console.assert(this.boardState[cellIndex] === this.UNSPECIFIED);\n\n        this.boardState[cellIndex] = playerValue;\n\n        if (this._checkForWin(this.boardState, playerValue)) {\n            this.winner = playerValue;\n        } else if (this._checkForTie()) {\n            this.winner = 3;\n        }\n\n    }\n\n    _checkForWin(cells, player) {\n\n        var wincombo0 = [0,1,2];\n        var wincombo1 = [3,4,5];\n        var wincombo2 = [6,7,8];\n        var wincombo3 = [0,3,6];\n        var wincombo4 = [1,4,7];\n        var wincombo5 = [2,5,8];\n        var wincombo6 = [0,4,8];\n        var wincombo7 = [2,4,6];\n        var combos = [wincombo0, wincombo1, wincombo2, wincombo3, wincombo4, wincombo5, wincombo6, wincombo7];\n\n        for (var i = 0; i < combos.length; i++) {\n            var wincombo = combos[i];\n            if (cells[wincombo[0]]===player && cells[wincombo[1]]===player && cells[wincombo[2]]===player) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    _checkForTie() {\n        for (var i = 0; i < 9; i++) {\n            if (this.boardState[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nexport default BoardModel;","import logo from './logo.svg';\nimport './App.css';\nimport BoardModel from './BoardModel.js';\nimport React, {useEffect, useState} from 'react';\n\nfunction clamp(val, min, max) {\n  if (val < min) return min;\n  if (val > max) return max;\n  return val;\n}\n\nconst AreaSquare = (props) => {\n  var coordinates = props.left.toString() + \",\" + props.top.toString() + \",\" + props.right.toString() + \",\" + props.bottom.toString();\n  return <area coords={coordinates} shape=\"rect\" onClick={props.callback} />\n};\n\nconst CellImage = (props) => {\n  const leftOffset = ((props.cellIndex % 3) * 200).toString() + \"px\";\n  const topOffset = (Math.floor((props.cellIndex / 3)) * 200).toString() + \"px\";\n  const src = (props.cellValue === 1) ? \"X.png\" : \"O.png\";\n\n  if (props.cellValue === 0) {\n    return (<></>);\n  }\n\n  var opacity = (props.hover) ? .1 : 1;\n\n  return <img key={props.cellIndex} src={src} style={{position:\"absolute\", left:leftOffset, top:topOffset, pointerEvents:\"none\", opacity:opacity}} />\n};\n\nconst Board = (props) => {\n\n  let boardState = props.boardState;\n  const cellIndices = [0,1,2,3,4,5,6,7,8];\n  const [hoverIndex, setHoverIndex] = useState(-1);\n  \n  var styles = {\n    margin:\"0 auto\",\n    position:\"relative\",\n    width:\"600px\"\n  };\n\n  const cellCallback = (cellNum) => {\n    props.cellCallback(cellNum);\n  };\n\n  const onMouseEnter = (event) => {\n  \n  // https://stackoverflow.com/questions/3234256/find-mouse-position-relative-to-element/42111623#42111623\n\n    //console.log(\"onMouseEnter\", event.clientX, event.clientY);\n\n    let divRect = document.getElementById(\"div_img_board\").getBoundingClientRect();\n    let imgRect = document.getElementById(\"img_board\").getBoundingClientRect();\n\n    let normalizedY = clamp(Math.floor(event.clientY - imgRect.top), 0, 600);\n    let row = clamp(Math.floor(normalizedY / 200), 0, 2);\n\n    let normalizedX = clamp(Math.floor(event.clientX - imgRect.left), 0, 600);\n    let col = clamp(Math.floor(normalizedX / 200), 0, 2);\n    \n    //console.log(\"setting hover index to:\", row*3);\n\n    setHoverIndex(row*3+col);\n  }\n\n\n  const onMouseLeave = (cellNum) => {\n      setHoverIndex(-1);\n  };\n\n  const GenerateAreaSquare = (cellNum) => {\n    let left = (cellNum%3)*200;\n    let top = Math.floor(cellNum/3)*200;\n    let right = left + 200;\n    let bottom = top + 200\n    return <AreaSquare left={left} top={top} right={right} bottom={bottom} callback={()=>cellCallback(cellNum)} ></AreaSquare>\n  }\n\n\n  return(\n    <div id=\"div_img_board\" style={styles} onMouseMove={onMouseEnter} onMouseOut={onMouseLeave}>\n      <img id=\"img_board\" src=\"board.png\" useMap=\"#boardmap\"  />\n\n      {cellIndices.map(index=>  <CellImage cellIndex={index} cellValue={boardState[index]} /> )}\n\n      {cellIndices.map(  (index) => {\n          if (index===hoverIndex && !boardState[index]) {\n            return ( <CellImage cellIndex={index} cellValue={props.playerIsX?1:2} hover={true} /> );\n          }\n          return (<></>);\n      })}\n\n\n      <map id=\"boardmap\" name=\"boardmap\" style={{position:\"absolute\"}} >\n        {cellIndices.map(cellNum => GenerateAreaSquare(cellNum))}\n      </map>\n\n    </div>\n  );\n};\n\nconst Controls = (props) => {\n\n  const [playerIsX, setPlayerIsX] = useState(true);\n\n  const onChangeHandler = (event) => {\n    //console.log(\"onChangeHandler: \", event.target.value);\n    var playerIsXUpdated = event.target.value===\"first\"\n    setPlayerIsX(playerIsXUpdated);\n  };\n\n  const onSubmit = () => {\n    //console.log(\"onSubmit\", playerIsX);\n    props.onNewGame(playerIsX);\n  }\n\n  return (\n  <center>\n    <input name=\"radgroup1\" type=\"radio\" value={\"first\"} checked={playerIsX}  onChange={onChangeHandler}/>Local Player is X &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n    <input name=\"radgroup1\" type=\"radio\" value={\"second\"} checked={!playerIsX} onChange={onChangeHandler}/>Computer is X \n    <p></p>\n    <input type=\"button\" value=\"Start New Game\" onClick={onSubmit}  />\n    <p></p>\n    <h1>{props.message}</h1>\n  </center>\n  );\n\n};\n\n\n\nconst DumpBoard = (cells) => {\n\n  var display = cells.map(val=> {\n    if (val === 0) return \"_\";\n    if (val === 1) return \"X\";\n    if (val === 2) return \"O\";\n    return \"?\"\n\n  });\n\n  console.log(\"\\n\\n============================\")\n  console.log(display[0], display[1], display[2]);\n  console.log(display[3], display[4], display[5]);\n  console.log(display[6], display[7], display[8]);\n  console.log(\"============================\")\n}\n\nconst BoardDiv = (props) => {\n\n  let [boardModel, setBoardModel] = useState( () => {\n    return new BoardModel(true);  // lazy state initialization\n  });\n\n  const cellCallback = (cellNum) => {\n    //console.log(\"click on cell: \", cellNum);\n    boardModel.playerMakeMove(cellNum);\n    setBoardModel(boardModel.clone());\n  };\n  \n  const startNewGame = (playerIsX)  => {\n    setBoardModel(new BoardModel(playerIsX));\n  }\n\n  var message = \"\";\n  if (boardModel.winner === boardModel.TIE) {\n    message = \"Tie Game!\";\n  } else if (boardModel.winner === boardModel.X) {\n    message = \"X is Winner!\";\n  } else if (boardModel.winner === boardModel.O) {\n    message = \"O is Winner!\";\n  }\n\n  //DumpBoard(boardModel.boardState);\n  var playerIsX = (boardModel.localPlayerValue===boardModel.X);\n\n  return (\n  <div>\n    <center><h1>TIC - TAC - TOE</h1></center>\n    <Board cellCallback={cellCallback} boardState={boardModel.boardState} playerIsX={playerIsX} />\n    <Controls onNewGame={startNewGame} message={message}/>\n  </div>\n  );\n\n\n};\n\nconst App = () => {\n  //console.log(\"RENDERING APP\");\n  const styles = {\n    backgroundColor:\"#ffffff\",\n    margin:\"0 auto\",\n    position:\"relative\"\n  };\n\n  return (\n   <div style={styles}>\n   <BoardDiv/>\n   <center>Source code here: <a href=\"https://github.com/krishnabardoliya/tic-tac-toe\">https://github.com/krishnabardoliya/tic-tac-toe</a></center>\n   </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}